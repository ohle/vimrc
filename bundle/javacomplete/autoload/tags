!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddToParent	Reflection.java	/^    public static void AddToParent(Hashtable map, String parent, String child) {$/;"	m	class:Reflection
INDEX_CLASS	Reflection.java	/^    private static int INDEX_CLASS = 1;$/;"	f	class:Reflection	file:
INDEX_PACKAGE	Reflection.java	/^    private static int INDEX_PACKAGE = 0;$/;"	f	class:Reflection	file:
KEY_DECLARING_CLASS	Reflection.java	/^    static final String KEY_DECLARING_CLASS	= "'c':";	\/\/ "'declaringclass':";$/;"	f	class:Reflection
KEY_DESCRIPTION	Reflection.java	/^    static final String KEY_DESCRIPTION		= "'d':";	\/\/ "'description':";$/;"	f	class:Reflection
KEY_MODIFIER	Reflection.java	/^    static final String KEY_MODIFIER		= "'m':";	\/\/ "'modifier':";$/;"	f	class:Reflection
KEY_NAME	Reflection.java	/^    static final String KEY_NAME		= "'n':";	\/\/ "'name':";$/;"	f	class:Reflection
KEY_PARAMETERTYPES	Reflection.java	/^    static final String KEY_PARAMETERTYPES	= "'p':";	\/\/ "'parameterTypes':";$/;"	f	class:Reflection
KEY_RETURNTYPE	Reflection.java	/^    static final String KEY_RETURNTYPE		= "'r':";	\/\/ "'returnType':";$/;"	f	class:Reflection
KEY_TYPE	Reflection.java	/^    static final String KEY_TYPE		= "'t':";	\/\/ "'type':";$/;"	f	class:Reflection
NEWLINE	Reflection.java	/^    static final String NEWLINE = "";	\/\/ "\\r\\n"$/;"	f	class:Reflection
OPTION_ALL	Reflection.java	/^    static final int OPTION_ALL			= 31;	\/\/ compound all$/;"	f	class:Reflection
OPTION_CONSTRUCTOR	Reflection.java	/^    static final int OPTION_CONSTRUCTOR		= 16;$/;"	f	class:Reflection
OPTION_FIELD	Reflection.java	/^    static final int OPTION_FIELD		=  1;$/;"	f	class:Reflection
OPTION_INSTANCE	Reflection.java	/^    static final int OPTION_INSTANCE		= 15;	\/\/ compound instance$/;"	f	class:Reflection
OPTION_METHOD	Reflection.java	/^    static final int OPTION_METHOD		=  2;$/;"	f	class:Reflection
OPTION_SAME_PACKAGE	Reflection.java	/^    static final int OPTION_SAME_PACKAGE	= 64;$/;"	f	class:Reflection
OPTION_STATIC	Reflection.java	/^    static final int OPTION_STATIC		= 12;	\/\/ compound static$/;"	f	class:Reflection
OPTION_STATIC_FIELD	Reflection.java	/^    static final int OPTION_STATIC_FIELD	=  4;$/;"	f	class:Reflection
OPTION_STATIC_METHOD	Reflection.java	/^    static final int OPTION_STATIC_METHOD	=  8;$/;"	f	class:Reflection
OPTION_SUPER	Reflection.java	/^    static final int OPTION_SUPER		= 32;$/;"	f	class:Reflection
RETURN_ALL_PACKAGE_INFO	Reflection.java	/^    static final int RETURN_ALL_PACKAGE_INFO	= 0x1000;$/;"	f	class:Reflection
Reflection	Reflection.java	/^class Reflection {$/;"	c
STRATEGY_ALPHABETIC	Reflection.java	/^    static final int STRATEGY_ALPHABETIC	= 128;$/;"	f	class:Reflection
STRATEGY_DEFAULT	Reflection.java	/^    static final int STRATEGY_DEFAULT		= 512;$/;"	f	class:Reflection
STRATEGY_HIERARCHY	Reflection.java	/^    static final int STRATEGY_HIERARCHY		= 256;$/;"	f	class:Reflection
VERSION	Reflection.java	/^    static final String VERSION	= "0.77";$/;"	f	class:Reflection
addClasspathesFromDir	Reflection.java	/^    private static void addClasspathesFromDir(String dirpath) {$/;"	m	class:Reflection	file:
appendDeclaredMembers	Reflection.java	/^    private static void appendDeclaredMembers(Hashtable map, Class clazz, StringBuffer sb) {$/;"	m	class:Reflection	file:
appendListFromFolder	Reflection.java	/^    public static void appendListFromFolder(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection
appendListFromJar	Reflection.java	/^    public static void appendListFromJar(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection
appendListFromJar	Reflection.java	/^    public static void appendListFromJar(String path, Hashtable map) {$/;"	m	class:Reflection
appendModifier	Reflection.java	/^    private static void appendModifier(StringBuffer sb, int modifier) {$/;"	m	class:Reflection	file:
appendParameterTypes	Reflection.java	/^    private static void appendParameterTypes(StringBuffer sb, Class[] paramTypes) {$/;"	m	class:Reflection	file:
collectClassPath	Reflection.java	/^    private static Hashtable collectClassPath() {$/;"	m	class:Reflection	file:
debug	Reflection.java	/^    static void debug(String s) {$/;"	m	class:Reflection
debug_mode	Reflection.java	/^    static boolean debug_mode = false;$/;"	f	class:Reflection
existed	Reflection.java	/^    public static boolean existed(String fqn) {$/;"	m	class:Reflection
existedAndRead	Reflection.java	/^    public static String existedAndRead(String fqns) {$/;"	m	class:Reflection
getClassInfo	Reflection.java	/^    public static String getClassInfo(String className) {$/;"	m	class:Reflection
getPackageList	Reflection.java	/^    private static String getPackageList(String fqn) {$/;"	m	class:Reflection	file:
getPackageList	Reflection.java	/^    public static String getPackageList() {$/;"	m	class:Reflection
htClasspath	Reflection.java	/^    static Hashtable htClasspath = new Hashtable();$/;"	f	class:Reflection
isBlank	Reflection.java	/^    private static boolean isBlank(String str) {$/;"	m	class:Reflection	file:
main	Reflection.java	/^    public static void main(String[] args) {$/;"	m	class:Reflection
output	Reflection.java	/^    static void output(String s) {$/;"	m	class:Reflection
putClassInfo	Reflection.java	/^    private static void putClassInfo(Hashtable map, Class clazz) {$/;"	m	class:Reflection	file:
putItem	Reflection.java	/^    public static void putItem(Hashtable map, String parent, String child, int index) {$/;"	m	class:Reflection
putPackageInfo	Reflection.java	/^    private static void putPackageInfo(Hashtable map, String name) {$/;"	m	class:Reflection	file:
usage	Reflection.java	/^    private static void usage() {$/;"	m	class:Reflection	file:
